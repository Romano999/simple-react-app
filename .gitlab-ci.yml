image: node:latest

stages:
  - build
  - test
  - qa
  - publish
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

build:
  stage: build
  script:
    - npm install
    - npm run build

test:
  stage: test
  script:
    - npm test

sonarqube-check:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: qa
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  only:
    - master # or the name of your main branch

publish-to-registry:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  only:
    - master
  script:
    - docker build -t romano2001/simple-dotnet-api-test:latest .
    - docker login -u romano2001 -p $DOCKER_TOKEN
    - docker push romano2001/simple-dotnet-api-test:latest

deploy-job:
  stage: deploy
  environment: production
  only:
    - master
  script:
    - apt-get update -qy
    - apt-get install -y openssh-client
    - echo "$SSH_PRIVATE_KEY" > ssh_key
    - chmod 600 ssh_key

    # Create the .ssh directory and known_hosts file
    - mkdir -p ~/.ssh
    - touch ~/.ssh/known_hosts

    # Add the remote host key to known_hosts 
    - ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts
    
    - ssh -v -i ssh_key $VPS_USER@$VPS_HOST "docker service update --image romano2001/simple-dotnet-api-test:latest simple-dotnet-api-test"
    # - ssh -v -i ssh_key $VPS_USER@$VPS_HOST "docker pull romano2001/simple-dotnet-api-test:latest"
    # - ssh -v -i ssh_key $VPS_USER@$VPS_HOST "docker run -d --name my-app-container -p 80:80 romano2001/simple-dotnet-api-test:latest"
